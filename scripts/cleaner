#!/bin/python3

# SOML oven "starter" script (aka cleaner)
#
# Tom Trebisky  12-2020

import tkinter as tk
import tkinter.font
import os
import sys
import getpass

from functools import partial

test_mode = False
#test_mode = True

already_told_him = False

if test_mode :
    oven_size = 524288
else :
    oven_size = 263748

# We have these "modes"
INIT = 99
TASK = 1
SHM = 2
STARTUP = 3

# Sort of a homebrew enum for which oven we are working
# with.  These are used in the radio button controlled
# intvar self.oven
MAIN_OVEN = 1
MCUBE = 2

DEF_WIDTH=300

# "dest" status on ipcs means "marked to be destroyed".
# It actually will be destroyed when all applications that
# have it attached have terminated.

class Cleaner:
    def __init__ (self, which_oven) :

        self.mw = tk.Tk()
        self.mw.title('Oven Starter / Cleaner')

        self.new_dir ( which_oven )
        self.windows ( which_oven )

        fixed_font = tkinter.font.nametofont("TkFixedFont")
        self.mw.option_add("*Font", fixed_font)

        root = tk.Frame ( self.mw, width=DEF_WIDTH ).pack ()
        self.root = root

        f1 = tk.Frame ( root, pady=10 )
        f1.pack()

        self.sb = tk.Button( f1, text="Startup", command=self.reload_start)
        self.sb.pack(side='left')

        self.bu = tk.Button( f1, text="Shared Memory", command=self.reload_shm)
        self.bu.pack(side='left')

        self.tsk = tk.Button( f1, text="Tasks", command=self.reload_task)
        self.tsk.pack(side='left')

        self.qu = tk.Button( f1, text="Quit", command=self.mw.destroy)
        self.qu.pack(side='left')

        self.f2 = tk.Frame ( root, width=DEF_WIDTH )
        self.f2.pack()

        self.f3 = tk.Frame ( root )

        self.ma = tk.Button( self.f3, text="Check all", command=self.ckall)
        self.ma.pack(side='left')
        self.ua = tk.Button( self.f3, text="Uncheck all", command=self.unckall)
        self.ua.pack(side='left')

        self.nk = tk.Button( self.f3, text="Nuke 'em", command=self.nuke)
        self.nk.pack(side='right', padx=50 )
        # self.f3.pack()

        self.f4 = tk.Frame ( root )

        v = tk.IntVar()
        v.set ( which_oven )
        self.oven = v

        tk.Radiobutton(self.f4, text="Main oven", padx = 20,
            command=self.change_oven,
            variable=v, value=MAIN_OVEN).pack(side='left')
        tk.Radiobutton(self.f4, text="Meter cube", padx = 20,
            command=self.change_oven,
            variable=v, value=MCUBE).pack(side='left')

        # load up the first tab
        self.mode = INIT
        self.info = []
        #self.reload_shm ()
        self.reload_start ()

        tk.mainloop()

    def windows ( self, which_oven ) :
        if which_oven == MAIN_OVEN :
            os.system ( "ximtool &" );
            os.system ( "gnome-terminal --title='Blue Oven terminal' --window-with-profile=Blue -- oven &" )
            os.system ( "gnome-terminal --title='Red Oven terminal' --window-with-profile=Red -- oven &" )
            os.system ( "xgterm -fg purple -bg white -tn 'Purple Oven terminal' -e cl &" )
        else :
            # We don't need a cl window for the MCUBE
            # os.system ( "xgterm -name ovenBlue -title 'Blue IRAF XGterm (orig)' -e cl &" )
            # xfce terminal is lame and without many options
            # os.system ( "xfce4-terminal --title='Blue Oven terminal' &" )
            # gnome terminal on the other hand is much more flexible
            os.system ( "gnome-terminal --title='Blue Oven terminal' --window-with-profile=Blue -- oven &" )

    def change_dir ( self, path ) :
        if not os.path.exists ( path) :
            print ( "The directory does not exist!! - " + path )
            exit ()
        if not os.path.isdir ( path) :
            print ( "This must be a directory!! - " + path )
            exit ()
        os.chdir ( path );
                
    # on 1-5-2021, I decided to only switch directories for MCUBE
    # for the pilot, we stay in the home directory.
    # BUT, when I am running as "tom", I move to ~/Casting
    # since I don't want the oven mess in my home directory
    def new_dir ( self, which_oven ) :
        global already_told_him

        if which_oven == MCUBE :
            path = os.path.expanduser ( "~/MCUBE" )
            self.change_dir ( path );
            print ( "Changed to directory " + os.getcwd() )
            return

        user = getpass.getuser()
        if user == "tom" :
            path = os.path.expanduser ( "~/Casting" )
            self.change_dir ( path );
            if not already_told_him :
                print ( "Changed to directory " + os.getcwd() + " for user " + user )
                already_told_him = True

    def find_pid ( self, who ) :
        tasks = os.popen('ps -eo pid,command').read().splitlines()
        for ll in tasks[1:] :
            ww = ll.split()
            # Note broken, stupid python "stop" on a slice is one beyond the last item
            xx = ' '.join( ww[1:3] )
            if xx == who :
                return ww[0]
        return None

    def ckall ( self ) :
        for w in self.info :
            (l,c,v) = w
            v.set(1)

    def unckall ( self ) :
        for w in self.info :
            (l,c,v) = w
            v.set(0)

    def unload ( self ) :
        if self.mode == INIT :
            return

        if self.mode == STARTUP :
            for w in self.info :
                w.destroy ()
        else :
            for w in self.info :
                (l,c,v) = w
                #print ( l )
                c.destroy ()
        self.info = []

    # get rid of either a process or a shm segment
    def nuke_one ( self, line ) :
        ww = line.split()
        if self.mode == SHM :
            cmd = "ipcrm -m " + ww[2]
            #print ( cmd )
            os.system ( cmd )
        else :
            cmd = "kill -9 " + ww[0]
            #print ( cmd )
            os.system ( cmd )

    # get rid of all selected items
    def nuke ( self ) :
        for w in self.info :
            (l,c,v) = w
            if v.get() == 1 :
                self.nuke_one ( l )
            if self.mode == SHM :
                self.reload_shm ()
            else :
                self.reload_task ()

    def task_pid ( self, line ) :
        ww = line.split()
        pid = int ( ww[2] )

    # shared by shm and tasks
    def reload_stuff ( self, stuff ) :
        self.info = []
        for l in stuff :
            v = tk.IntVar()
            v.set(0)
            c = tk.Checkbutton( self.f2, text=l, variable=v)
            self.info.append ( (l,c,v) )
            c.pack ()

# ----------------------------------
# - stuff for shared memory tab

    def reload_shm ( self ) :
        self.unload ()
        if self.mode == STARTUP :
            self.f3.pack()
            self.f4.pack_forget()
        self.mode = SHM
        self.reload_stuff ( self.get_shm() )

    def shm_friendly ( self, xyz ) :
        if xyz == "0x00000100" :
            return "-c0"
        if xyz == "0x00000101" :
            return "-c1"
        if xyz == "0x00000102" :
            return "-c2"
        if xyz == "0x00000110" :
            return "-M "
        return "?? "

    def get_shm ( self ) :
        # First 3 lines are header stuff
        # Last line is blank
        #ipcs = os.popen('ipcs').readlines()
        ipcs = os.popen('ipcs -m').read().splitlines()
        rv = []
        for ii in ipcs[3:-1] :
            ww = ii.split()
            if int(ww[4]) == oven_size :
                lab = self.shm_friendly(ww[0]) + " " + ii 
                rv.append ( lab )
        return rv

# ----------------------------------
# - stuff for tasks tab

    def reload_task ( self ) :
        self.unload ()
        if self.mode == STARTUP :
            self.f3.pack()
            self.f4.pack_forget()
        self.mode = TASK
        self.reload_stuff ( self.get_tasks() )

    # first line is header
    def get_tasks ( self ) :
        global test_mode

        #tasks = os.popen('ps -alx').read().splitlines()
        tasks = os.popen('ps -eo pid,user,bsdtime,command').read().splitlines()
        rv = []
        for ll in tasks[1:] :
            ww = ll.split()
            # print ( ll[:80] )
            keep = False
            if "iraf" in ll :
                keep = True
            if "oven" in ll :
                keep = True
            if "mirror" in ll :
                keep = True
            if test_mode and "xfce" in ll :
                keep = True
            if keep :
                #print ( ww[12] )
                rv.append ( ll[:100].ljust(100) )
        return rv

# ----------------------------------
# - stuff for startup tab

    def reload_start ( self ) :
        self.unload ()
        if self.mode != STARTUP :
            self.f3.pack_forget()
        self.f4.pack()
        self.mode = STARTUP

        self.change_oven ()

    def change_oven ( self ) :
        self.unload ()

        self.info = []

        # oven.get() fetches the value of the radiobutton controlled
        # intVar that is 1 for the main oven, 2 for the Mcube

        # tasks
        if self.oven.get() == MAIN_OVEN :
            self.new_dir ( MAIN_OVEN )
            self.st_one ("ovend")
            self.st_one ("ovene -c0")
            self.st_one ("ovene -c1")
            self.st_one ("ovene -c2")
            # Randy says ovenr is no longer used.
            #self.st_one ("ovenr")
            self.st_one ("oveng")
        else :
            self.new_dir ( MCUBE )
            self.st_one ("ovend -M")
            self.st_one ("ovene -M")
        self.st_one ("ovenp")
        self.st_one ("ovenb")

        # shared memory
        if self.oven.get() == MAIN_OVEN :
            self.sm_one ( "-c0" )
            self.sm_one ( "-c1" )
            self.sm_one ( "-c2" )
        else :
            self.sm_one ( "-M" )

        #print ( "Change oven -- In directory: " + os.getcwd() )

    def st_one ( self, who ) :
        f = tk.Frame ( self.f2, width=DEF_WIDTH )
        f.pack()
        self.info.append ( f )

        l1 = tk.Label( f, text=who.ljust(10) )
        l1.pack(side='left')

        if self.find_pid ( who ) == None :
            status = "not running"
            color = 'yellow'
        else :
            status = "Running!"
            color = 'green2'

        status = ("  " + status).ljust(24)
        l2 = tk.Label( f, text=status, bg=color )
        f.configure ( bg=color )

        l2.pack(side='left')

        b1 = tk.Button( f, text="Start", command=partial(self.st_start,who))
        b1.pack(side='left')
        b2 = tk.Button( f, text="Stop", command=partial(self.st_stop,who))
        b2.pack(side='left')
        b3 = tk.Button( f, text="Restart", command=partial(self.st_restart,who))
        b3.pack(side='left')

    def st_start ( self, who ) :
        cmd = who + " &"
        os.system ( cmd )
        self.reload_start ()

    def st_stop ( self, who ) :
        pid = self.find_pid ( who )
        if pid != None :
            print ( "Found: " + pid )
            os.system ( "kill -9 " + pid )
        else :
            print ( "Not running" )
        self.reload_start ()

    def st_restart ( self, who ) :
        self.st_stop ( who )
        self.st_start ( who )
        #self.reload_start ()

    def find_shm ( self, who ) :
        cmd = 'oven_shm ' + who
        info = os.popen(cmd).read().rstrip()
        #print ( info )
        return info

    def shm_load_disk ( self, who ) :
        cmd = 'oven_shm -dload ' + who
        os.system ( cmd )
        self.reload_start ();

    def shm_load_oven ( self, who ) :
        cmd = 'oven_shm -oload ' + who
        os.system ( cmd )
        self.reload_start ();

    # Set up a line in the Start GUI for a shm segment
    def sm_one ( self, who ) :
        f = tk.Frame ( self.f2, width=DEF_WIDTH )
        f.pack()
        self.info.append ( f )

        lab = "shm " + who
        l1 = tk.Label( f, text=lab.ljust(10) )
        l1.pack(side='left')

        zones = self.find_shm ( who )
        if zones == "Sorry" :
            status = "none"
            color = 'yellow'
        else :
            status = zones
            color = 'green2'

        status = ("  " + status).ljust(24)
        l2 = tk.Label( f, text=status, bg=color )
        f.configure ( bg=color )

        l2.pack(side='left')

        b1 = tk.Button( f, text="Load from oven", command=partial(self.shm_load_oven,who))
        b1.pack(side='left')
        b2 = tk.Button( f, text="Load from disk", command=partial(self.shm_load_disk,who))
        b2.pack(side='left')

if len(sys.argv) > 1 :
    if sys.argv[1] == "-M" :
        Cleaner ( MCUBE )
        exit ()

Cleaner ( MAIN_OVEN )

# THE END
